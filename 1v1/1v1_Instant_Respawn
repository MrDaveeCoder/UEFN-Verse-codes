using { /Fortnite.com/FortPlayerUtilities }
using { /Fortnite.com/Characters }
using { /Fortnite.com/Game }
using { /Fortnite.com/Devices }
using { /Verse.org/Random }
using { /Verse.org/Simulation }
using { /UnrealEngine.com/Temporary/SpatialMath }
using { /UnrealEngine.com/Temporary/Diagnostics }
<#
 __  __      ____                       
|  \/  |_ __|  _ \  __ ___   _____  ___ 
| |\/| | '__| | | |/ _` \ \ / / _ \/ _ \
| |  | | |  | |_| | (_| |\ V /  __/  __/
|_|  |_|_|  |____/ \__,_| \_/ \___|\___|
#>

Instant_Respawn := class(creative_device):

    # Player spawners for both of the players.
    @editable var SpawnsPad : []player_spawner_device = array{}
    # Elimination manager that checks when a player gets eliminated.
    @editable ElimManager : elimination_manager_device = elimination_manager_device{}
 
    SelfEliminated(Agent:agent)<suspends>:void=
      Sleep(0.1)
            PadRandom := GetRandomInt(1,SpawnsPad.Length)
            if ( RandomInt := SpawnsPad[PadRandom-1] ): 
                Transform := RandomInt.GetTransform()
                Agent.Respawn(Transform.Translation, Transform.Rotation)

    SE(Agent:agent):void=
      spawn{SelfEliminated(Agent)}


    OnBegin<override>()<suspends>:void=
      ElimManager.EliminatedEvent.Subscribe(SE)
